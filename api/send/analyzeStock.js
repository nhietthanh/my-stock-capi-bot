// // lib/analyzeStock.js
// import axios from "axios";
// import { RSI, MACD, StochasticRSI } from "technicalindicators";

// export async function analyzeStock(symbol = "FPT") {
//   const to = Math.floor(Date.now() / 1000);
//   const from = to - 365 * 24 * 60 * 60; // 1 nƒÉm tr∆∞·ªõc
//   const countback = 330;

//   const url = `https://chart-api.mbs.com.vn/pbRltCharts/chart/v2/history?symbol=${symbol}&resolution=1D&from=${from}&to=${to}&countback=${countback}`;

//   const resp = await axios.get(url, { timeout: 15000 });
//   const data = resp.data;

//   if (!data || data.s !== "ok" || !Array.isArray(data.c) || data.c.length === 0) {
//     throw new Error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ MBS API");
//   }

//   const closes = data.c.map(Number).filter((n) => !Number.isNaN(n));
//   const volumes = Array.isArray(data.v) ? data.v.map(Number) : [];

//   if (closes.length < 20) {
//     throw new Error("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh ch·ªâ b√°o (√≠t h∆°n 20 phi√™n).");
//   }

//   // RSI
//   const rsiArr = RSI.calculate({ values: closes, period: 14 });
//   const rsi = rsiArr.length ? rsiArr[rsiArr.length - 1] : null;

//   // MACD
//   const macdArr = MACD.calculate({
//     values: closes,
//     fastPeriod: 12,
//     slowPeriod: 26,
//     signalPeriod: 9,
//     SimpleMAOscillator: false,
//     SimpleMASignal: false,
//   });
//   const macdLast = macdArr.length ? macdArr[macdArr.length - 1] : null;

//   // Stochastic RSI
//   const stochArr = StochasticRSI.calculate({
//     values: closes,
//     rsiPeriod: 14,
//     stochasticPeriod: 14,
//     kPeriod: 3,
//     dPeriod: 3,
//   });
//   const stochLast = stochArr.length ? stochArr[stochArr.length - 1] : null;

//   // Gi√° & Volume
//   const lastClose = closes[closes.length - 1];
//   const prevClose = closes.length > 1 ? closes[closes.length - 2] : lastClose;
//   const changePercent = prevClose ? ((lastClose - prevClose) / prevClose) * 100 : 0;
//   const lastVolume = volumes.length ? volumes[volumes.length - 1] : 0;
//   const avgVolume20 =
//     volumes.length >= 20
//       ? volumes.slice(-20).reduce((a, b) => a + b, 0) / 20
//       : volumes.reduce((a, b) => a + b, 0) / Math.max(1, volumes.length);

//   // Nh·∫≠n ƒë·ªãnh
//   const rsiComment =
//     rsi === null
//       ? "N/A"
//       : rsi > 70
//       ? "‚Üí v√πng qu√° mua, r·ªßi ro ƒëi·ªÅu ch·ªânh"
//       : rsi < 30
//       ? "‚Üí v√πng qu√° b√°n, c√≥ th·ªÉ h·ªìi ph·ª•c"
//       : "‚Üí v√πng trung l·∫≠p";

//   const macdComment =
//     macdLast === null
//       ? "N/A"
//       : macdLast.MACD > macdLast.signal
//       ? "‚Üí t√≠n hi·ªáu tƒÉng"
//       : "‚Üí t√≠n hi·ªáu gi·∫£m";

//   const stochComment =
//     stochLast === null
//       ? "N/A"
//       : stochLast.k < 20 && stochLast.d < 20
//       ? "‚Üí v√πng qu√° b√°n, c√≥ th·ªÉ h·ªìi k·ªπ thu·∫≠t"
//       : stochLast.k > 80 && stochLast.d > 80
//       ? "‚Üí v√πng qu√° mua, d·ªÖ ƒëi·ªÅu ch·ªânh"
//       : "‚Üí trung l·∫≠p";

//   const trendSentence =
//     macdLast === null
//       ? "kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë√°nh gi√° xu h∆∞·ªõng"
//       : macdLast.MACD > macdLast.signal
//       ? "c√≥ t√≠n hi·ªáu h·ªìi ph·ª•c"
//       : "ch·ªãu √°p l·ª±c b√°n";

//   const shortForecast =
//     (rsi !== null && rsi < 35) || (stochLast && stochLast.k < 20 && stochLast.d < 20)
//       ? "Kh·∫£ nƒÉng h·ªìi k·ªπ thu·∫≠t trong ng·∫Øn h·∫°n."
//       : macdLast && macdLast.MACD < macdLast.signal
//       ? "R·ªßi ro ki·ªÉm ƒë·ªãnh l·∫°i h·ªó tr·ª£."
//       : "Ti·∫øp t·ª•c quan s√°t.";

//   // Format message
//   const message = `üìä Ph√¢n t√≠ch k·ªπ thu·∫≠t ${symbol}

// - Gi√° ƒë√≥ng c·ª≠a: ${lastClose.toFixed(2)} (${changePercent >= 0 ? "+" : ""}${changePercent.toFixed(2)}%)
// - Kh·ªëi l∆∞·ª£ng: ${(lastVolume / 1_000_000).toFixed(2)}M (TB20: ${(avgVolume20 / 1_000_000).toFixed(2)}M)

// üîé Ch·ªâ b√°o:
// - RSI(14): ${rsi !== null ? rsi.toFixed(1) : "N/A"} ${rsiComment}
// - MACD: ${macdLast ? macdLast.MACD.toFixed(2) : "N/A"} vs Signal ${
//     macdLast ? macdLast.signal.toFixed(2) : "N/A"
//   } ${macdComment}
// - Stochastic RSI: K=${stochLast ? stochLast.k.toFixed(2) : "N/A"}, D=${
//     stochLast ? stochLast.d.toFixed(2) : "N/A"
//   } ${stochComment}

// üìà Xu h∆∞·ªõng:
// ${symbol} ƒëang ${trendSentence}. ${shortForecast}

// ‚è∞ ${new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" })}`;

//   return message;
// }

import axios from "axios";
import { RSI, MACD, StochasticRSI, BollingerBands } from "technicalindicators";
import { RandomForestRegressor } from "ml-random-forest";

export async function analyzeStock(symbol = "FPT") {
  const to = Math.floor(Date.now() / 1000);
  const from = to - 365 * 24 * 60 * 60; // 1 nƒÉm tr∆∞·ªõc
  const countback = 330;

  const url = `https://chart-api.mbs.com.vn/pbRltCharts/chart/v2/history?symbol=${symbol}&resolution=1D&from=${from}&to=${to}&countback=${countback}`;

  let data;
  try {
    const resp = await axios.get(url, { timeout: 15000 });
    data = resp.data;
    if (!data || data.s !== "ok" || !Array.isArray(data.c) || data.c.length === 0) {
      throw new Error(`Invalid data from MBS API: ${JSON.stringify(data)}`);
    }
  } catch (err) {
    throw new Error(`Failed to fetch data from MBS API: ${err.message}`);
  }

  const closes = data.c.map(Number).filter((n) => !Number.isNaN(n));
  const volumes = Array.isArray(data.v) ? data.v.map(Number).filter((n) => !Number.isNaN(n)) : [];

  if (closes.length < 20) {
    throw new Error("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh ch·ªâ b√°o (√≠t h∆°n 20 phi√™n).");
  }

  // RSI
  const rsiArr = RSI.calculate({ values: closes, period: 14 });
  const rsi = rsiArr.length ? rsiArr[rsiArr.length - 1] : null;

  // MACD
  const macdArr = MACD.calculate({
    values: closes,
    fastPeriod: 12,
    slowPeriod: 26,
    signalPeriod: 9,
    SimpleMAOscillator: false,
    SimpleMASignal: false,
  });
  const macdLast = macdArr.length ? macdArr[macdArr.length - 1] : null;

  // Stochastic RSI
  const stochArr = StochasticRSI.calculate({
    values: closes,
    rsiPeriod: 14,
    stochasticPeriod: 14,
    kPeriod: 3,
    dPeriod: 3,
  });
  const stochLast = stochArr.length ? stochArr[stochArr.length - 1] : null;

  // Bollinger Bands
  const bbArr = BollingerBands.calculate({
    period: 20,
    values: closes,
    stdDev: 2,
  });
  const bbLast = bbArr.length ? bbArr[bbArr.length - 1] : null;
  const supportPrice = bbLast ? bbLast.lower : null; // Gi√° mua v√†o g·ª£i √Ω
  const resistancePrice = bbLast ? bbLast.upper : null; // Gi√° ch·ªët l·ªùi g·ª£i √Ω

  // Gi√° & Volume
  const lastClose = closes[closes.length - 1];
  const prevClose = closes.length > 1 ? closes[closes.length - 2] : lastClose;
  const changePercent = prevClose ? ((lastClose - prevClose) / prevClose) * 100 : 0;
  const lastVolume = volumes.length ? volumes[volumes.length - 1] : 0;
  const avgVolume20 =
    volumes.length >= 20
      ? volumes.slice(-20).reduce((a, b) => a + b, 0) / 20
      : volumes.reduce((a, b) => a + b, 0) / Math.max(1, volumes.length);

  // Random Forest ƒë·ªÉ d·ª± b√°o gi√° cu·ªëi nƒÉm
  function prepareRandomForestData(closes, volumes, rsiArr, macdArr) {
    const dataset = [];
    const labels = [];
    const lookback = 14; // S·ª≠ d·ª•ng 14 phi√™n g·∫ßn nh·∫•t l√†m ƒë·∫∑c tr∆∞ng

    for (let i = lookback; i < closes.length; i++) {
      const features = [
        closes[i - 1], // Gi√° phi√™n tr∆∞·ªõc
        volumes[i - 1] / 1_000_000, // Kh·ªëi l∆∞·ª£ng phi√™n tr∆∞·ªõc (chu·∫©n h√≥a)
        rsiArr[i - lookback] || 50, // RSI (n·∫øu null, d√πng 50)
        macdArr[i - lookback]?.MACD || 0, // MACD (n·∫øu null, d√πng 0)
        macdArr[i - lookback]?.signal || 0, // MACD signal
      ];
      dataset.push(features);
      labels.push(closes[i]); // D·ª± b√°o gi√° phi√™n hi·ªán t·∫°i
    }

    return { dataset, labels };
  }

  let yearEndForecast = null;
  try {
    const { dataset, labels } = prepareRandomForestData(closes, volumes, rsiArr, macdArr);
    if (dataset.length > 10) { // C·∫ßn ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán
      const rf = new RandomForestRegressor({ nEstimators: 100, maxDepth: 10 });
      rf.train(dataset, labels);

      // D·ª± b√°o gi√° cu·ªëi nƒÉm
      const latestFeatures = [
        closes[closes.length - 1],
        volumes[volumes.length - 1] / 1_000_000,
        rsiArr[rsiArr.length - 1] || 50,
        macdArr[macdArr.length - 1]?.MACD || 0,
        macdArr[macdArr.length - 1]?.signal || 0,
      ];
      yearEndForecast = rf.predict([latestFeatures])[0];
    }
  } catch (err) {
    console.error("Random Forest prediction failed:", err.message);
  }

  // Nh·∫≠n ƒë·ªãnh
  const rsiComment =
    rsi === null
      ? "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh RSI"
      : rsi > 70
      ? "‚Üí v√πng qu√° mua, r·ªßi ro ƒëi·ªÅu ch·ªânh"
      : rsi < 30
      ? "‚Üí v√πng qu√° b√°n, c√≥ th·ªÉ h·ªìi ph·ª•c"
      : "‚Üí v√πng trung l·∫≠p";

  const macdComment =
    macdLast === null
      ? "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh MACD"
      : macdLast.MACD > macdLast.signal
      ? "‚Üí t√≠n hi·ªáu tƒÉng"
      : "‚Üí t√≠n hi·ªáu gi·∫£m";

  const stochComment =
    stochLast === null
      ? "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh Stochastic RSI"
      : stochLast.k < 20 && stochLast.d < 20
      ? "‚Üí v√πng qu√° b√°n, c√≥ th·ªÉ h·ªìi k·ªπ thu·∫≠t"
      : stochLast.k > 80 && stochLast.d > 80
      ? "‚Üí v√πng qu√° mua, d·ªÖ ƒëi·ªÅu ch·ªânh"
      : "‚Üí trung l·∫≠p";

  const trendSentence =
    macdLast === null
      ? "kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë√°nh gi√° xu h∆∞·ªõng"
      : macdLast.MACD > macdLast.signal
      ? "c√≥ t√≠n hi·ªáu h·ªìi ph·ª•c"
      : "ch·ªãu √°p l·ª±c b√°n";

  const shortForecast =
    (rsi !== null && rsi < 35) || (stochLast && stochLast.k < 20 && stochLast.d < 20)
      ? "Kh·∫£ nƒÉng h·ªìi k·ªπ thu·∫≠t trong ng·∫Øn h·∫°n."
      : macdLast && macdLast.MACD < macdLast.signal
      ? "R·ªßi ro ki·ªÉm ƒë·ªãnh l·∫°i h·ªó tr·ª£."
      : "Ti·∫øp t·ª•c quan s√°t.";

  // Nh·∫≠n ƒë·ªãnh gi√°
  const supportComment = supportPrice
    ? `Gi√° mua v√†o g·ª£i √Ω: ${supportPrice.toFixed(2)} (Lower Bollinger Band - h·ªó tr·ª£ ti·ªÅm nƒÉng)`
    : "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh gi√° h·ªó tr·ª£";
  const resistanceComment = resistancePrice
    ? `Gi√° ch·ªët l·ªùi g·ª£i √Ω: ${resistancePrice.toFixed(2)} (Upper Bollinger Band - kh√°ng c·ª± ti·ªÅm nƒÉng)`
    : "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh gi√° kh√°ng c·ª±";
  const yearForecastComment = yearEndForecast
    ? `D·ª± b√°o gi√° cu·ªëi nƒÉm: ${yearEndForecast.toFixed(2)} (d·ª±a tr√™n Random Forest)`
    : "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± b√°o gi√° cu·ªëi nƒÉm";

  // Format message
  const message = `üìä Ph√¢n t√≠ch k·ªπ thu·∫≠t ${symbol}

- Gi√° ƒë√≥ng c·ª≠a: ${lastClose.toFixed(2)} (${changePercent >= 0 ? "+" : ""}${changePercent.toFixed(2)}%)
- Kh·ªëi l∆∞·ª£ng: ${(lastVolume / 1_000_000).toFixed(2)}M (TB20: ${(avgVolume20 / 1_000_000).toFixed(2)}M)

üîé Ch·ªâ b√°o:
- RSI(14): ${rsi !== null ? rsi.toFixed(1) : "N/A"} ${rsiComment}
- MACD: ${macdLast ? macdLast.MACD.toFixed(2) : "N/A"} vs Signal ${
    macdLast ? macdLast.signal.toFixed(2) : "N/A"
  } ${macdComment}
- Stochastic RSI: K=${stochLast ? stochLast.k.toFixed(2) : "N/A"}, D=${
    stochLast ? stochLast.d.toFixed(2) : "N/A"
  } ${stochComment}

üìà Xu h∆∞·ªõng:
${symbol} ƒëang ${trendSentence}. ${shortForecast}

üí∞ Nh·∫≠n ƒë·ªãnh gi√°:
- ${supportComment}
- ${resistanceComment}
- ${yearForecastComment}

*L∆∞u √Ω: ƒê√¢y ch·ªâ l√† ph√¢n t√≠ch k·ªπ thu·∫≠t, kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞. H√£y tham kh·∫£o √Ω ki·∫øn chuy√™n gia t√†i ch√≠nh.*

‚è∞ ${new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" })}`;

  return message;
}